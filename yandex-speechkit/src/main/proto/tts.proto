syntax = "proto3";

package speechkit.tts.v3;

option go_package = "a.yandex-team.ru/voicetech/asr/cloud_engine/server/tts/proto/v3;tts";
option java_package = "speechkit.tts.v3";

service Synthesizer {
    // tts here will change, just for MVP
    rpc UtteranceSynthesis (UtteranceSynthesisRequest) returns (stream UtteranceSynthesisResponse) {
    }
}

message AudioContent {
    // The audio source to read the data from.
    oneof AudioSource {
        bytes content = 1;
    }

    // Description of the audio format.
    AudioFormatOptions audio_spec = 2;
}

message AudioFormatOptions {
    oneof AudioFormat {
        // The audio format specified in request parameters.
        RawAudio raw_audio = 1;

        // The audio format specified inside the file header.
        ContainerAudio container_audio = 2;
    }
}

message RawAudio {
    enum AudioEncoding {
        AUDIO_ENCODING_UNSPECIFIED = 0;

        // 16-bit signed little-endian (Linear PCM)
        LINEAR16_PCM = 1;
    }

    // Encoding type.
    AudioEncoding audio_encoding = 1;

    // Sampling frequency of the signal.
    int64 sample_rate_hertz = 2;
}

message ContainerAudio {
    enum ContainerAudioType {
        CONTAINER_AUDIO_TYPE_UNSPECIFIED = 0;

        // RIFF linear pcm with header audio file format.
        WAV = 1;
    }
    ContainerAudioType container_audio_type = 1;
}


message TextVariable {
    string variable_name = 1;
    // The text of the variable to be synthesized instead of the template.
    string variable_value = 2;
}

message AudioVariable {
    string variable_name = 1;
    int64 variable_start_ms = 2;
    int64 variable_length_ms = 3;
}

message UtteranceSynthesisResponse {
    // Part of synthesized audio.
    AudioChunk audio_chunk = 1;
}

message AudioTemplate {
    AudioContent audio = 1;
    TextTemplate text_template = 2;
    repeated AudioVariable variables = 3;
}

message AudioChunk {
    // Sequence of bytes of the synthesized audio in format specified in output_audio_spec
    bytes data = 1;
}

message TextTemplate {
    // hello, {user}
    string text_template = 1;
    //{user: Adam}
    repeated TextVariable variables = 2;
}


message Hints {
    // The hint for specifying the voice that need to synthesize in the audio.
    oneof Hint {
        string voice = 1;
        AudioTemplate audio_template = 2;
    }
}

message UtteranceSynthesisRequest {
    string model = 1;
    // Text to synthesis, one of for advanced mark up in future
    oneof Utterance {
        string text = 2;
        TextTemplate text_template = 3;
    }
    // Optional hints for synthesis.
    repeated Hints hints = 4;
    // Optional. Default: 22050 Hz, linear 16-bit signed little-endian pcm
    AudioFormatOptions output_audio_spec = 5;
}
